<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üçΩÔ∏è ÏùåÏãù ÏòÅÏñë Î∂ÑÏÑùÍ∏∞</title>
    <style>
        /* =========== Í∏∞Î≥∏ Ïä§ÌÉÄÏùº =========== */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
            color: #333;
        }

        .container {
            max-width: 800px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(10px);
            overflow: hidden;
        }

        /* =========== Ìó§Îçî =========== */
        .header {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 30px;
            text-align: center;
        }

        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .header p {
            font-size: 1.1em;
            opacity: 0.9;
        }

        /* =========== Î©îÏù∏ Ïª®ÌÖêÏ∏† =========== */
        .main-content {
            padding: 40px;
        }

        .section {
            margin-bottom: 40px;
            padding: 30px;
            background: white;
            border-radius: 15px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
            border: 1px solid rgba(0, 0, 0, 0.05);
        }

        .section-title {
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 20px;
            color: #333;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        /* =========== Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†• =========== */
        .user-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 25px;
        }

        .form-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .form-group label {
            font-weight: 600;
            color: #555;
            font-size: 1.1em;
        }

        .radio-group {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }

        .radio-item {
            display: flex;
            align-items: center;
            gap: 8px;
            cursor: pointer;
            padding: 10px 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            transition: all 0.3s ease;
        }

        .radio-item:hover {
            border-color: #4facfe;
            background: rgba(79, 172, 254, 0.1);
        }

        .radio-item input[type="radio"]:checked + label {
            color: #4facfe;
            font-weight: 600;
        }

        .radio-item input[type="radio"]:checked {
            accent-color: #4facfe;
        }

        select {
            padding: 12px 15px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1em;
            transition: border-color 0.3s ease;
            background: white;
        }

        select:focus {
            outline: none;
            border-color: #4facfe;
            box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
        }

        /* =========== ÌååÏùº ÏóÖÎ°úÎìú =========== */
        .upload-area {
            border: 3px dashed #4facfe;
            border-radius: 15px;
            padding: 40px;
            text-align: center;
            background: rgba(79, 172, 254, 0.05);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .upload-area:hover {
            border-color: #00f2fe;
            background: rgba(79, 172, 254, 0.1);
        }

        .upload-area.dragover {
            border-color: #00f2fe;
            background: rgba(0, 242, 254, 0.1);
            transform: scale(1.02);
        }

        .upload-icon {
            font-size: 3em;
            margin-bottom: 15px;
            color: #4facfe;
        }

        .upload-text {
            font-size: 1.2em;
            color: #666;
            margin-bottom: 15px;
        }

        .upload-hint {
            font-size: 0.9em;
            color: #999;
            font-style: italic;
        }

        #fileInput {
            display: none;
        }

        .file-button {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 12px 25px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-size: 1em;
            font-weight: 600;
            margin-top: 15px;
            transition: transform 0.3s ease;
        }

        .file-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(79, 172, 254, 0.4);
        }

        /* =========== ÌååÏùº ÎØ∏Î¶¨Î≥¥Í∏∞ =========== */
        .preview-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 15px;
            margin-top: 20px;
        }

        .preview-item {
            position: relative;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .preview-image {
            width: 100%;
            height: 120px;
            object-fit: cover;
        }

        .preview-remove {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(255, 0, 0, 0.8);
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            cursor: pointer;
            font-size: 12px;
        }

        /* =========== Î∂ÑÏÑù Î≤ÑÌäº =========== */
        .analyze-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 18px 40px;
            border: none;
            border-radius: 50px;
            font-size: 1.2em;
            font-weight: 600;
            cursor: pointer;
            width: 100%;
            margin-top: 30px;
            transition: all 0.3s ease;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .analyze-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
        }

        .analyze-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        /* =========== Î°úÎî© ÏÉÅÌÉú =========== */
        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }

        .loading.show {
            display: block;
        }

        .loading-spinner {
            width: 50px;
            height: 50px;
            border: 5px solid #e1e5e9;
            border-top: 5px solid #4facfe;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .loading-text {
            font-size: 1.1em;
            color: #666;
        }

        /* =========== Í≤∞Í≥º ÏÑπÏÖò =========== */
        .results {
            display: none;
        }

        .results.show {
            display: block;
        }

        .food-list {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .food-item {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 0.9em;
            font-weight: 500;
        }

        .nutrition-summary {
            background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
            padding: 25px;
            border-radius: 15px;
            margin-bottom: 25px;
        }

        .calories-display {
            font-size: 2.5em;
            font-weight: 700;
            color: #e74c3c;
            text-align: center;
            margin-bottom: 15px;
        }

        .progress-bar {
            background: rgba(255, 255, 255, 0.3);
            border-radius: 10px;
            height: 20px;
            margin-bottom: 15px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4facfe, #00f2fe);
            border-radius: 10px;
            transition: width 0.8s ease;
        }

        .nutrition-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 25px;
        }

        .nutrition-item {
            background: white;
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .nutrition-icon {
            font-size: 2em;
            margin-bottom: 10px;
        }

        .nutrition-value {
            font-size: 1.5em;
            font-weight: 600;
            color: #333;
        }

        .nutrition-label {
            color: #666;
            font-size: 0.9em;
        }

        .health-assessment {
            background: white;
            padding: 25px;
            border-radius: 15px;
            border-left: 5px solid #4facfe;
        }

        .health-grade {
            display: inline-block;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 600;
            margin-bottom: 15px;
        }

        .grade-excellent { background: #d4edda; color: #155724; }
        .grade-good { background: #d1ecf1; color: #0c5460; }
        .grade-normal { background: #fff3cd; color: #856404; }
        .grade-caution { background: #f8d7da; color: #721c24; }
        .grade-danger { background: #f5c6cb; color: #721c24; }

        .recommendations {
            margin-top: 20px;
        }

        .rec-section {
            margin-bottom: 15px;
        }

        .rec-title {
            font-weight: 600;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .rec-list {
            list-style: none;
            padding-left: 25px;
        }

        .rec-list li {
            margin-bottom: 5px;
            position: relative;
        }

        .rec-list li:before {
            content: "‚Ä¢";
            position: absolute;
            left: -15px;
            color: #4facfe;
            font-weight: bold;
        }

        /* =========== ÏÉÅÏÑ∏ ÏòÅÏñëÌëú =========== */
        .nutrition-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        }

        .nutrition-table th,
        .nutrition-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e1e5e9;
        }

        .nutrition-table th {
            background: #f8f9fa;
            font-weight: 600;
            color: #333;
        }

        .nutrition-table tr:hover {
            background: rgba(79, 172, 254, 0.05);
        }

        /* =========== Ïï°ÏÖò Î≤ÑÌäºÎì§ =========== */
        .action-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-top: 30px;
        }

        .action-btn {
            padding: 12px 20px;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .action-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }

        /* =========== Î∞òÏùëÌòï ÎîîÏûêÏù∏ =========== */
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }

            .container {
                border-radius: 15px;
            }

            .header {
                padding: 20px;
            }

            .header h1 {
                font-size: 2em;
            }

            .main-content {
                padding: 20px;
            }

            .section {
                padding: 20px;
            }

            .user-info {
                grid-template-columns: 1fr;
            }

            .radio-group {
                justify-content: center;
            }

            .upload-area {
                padding: 30px 20px;
            }

            .calories-display {
                font-size: 2em;
            }

            .nutrition-grid {
                grid-template-columns: 1fr;
            }

            .action-buttons {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 480px) {
            .header h1 {
                font-size: 1.8em;
            }

            .section-title {
                font-size: 1.3em;
            }

            .upload-area {
                padding: 20px 15px;
            }

            .upload-text {
                font-size: 1em;
            }

            .preview-container {
                grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
            }

            .preview-image {
                height: 80px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Ìó§Îçî -->
        <div class="header">
            <h1>üçΩÔ∏è ÏùåÏãù ÏòÅÏñë Î∂ÑÏÑùÍ∏∞</h1>
            <p>AIÍ∞Ä Î∂ÑÏÑùÌïòÎäî ÎßûÏ∂§Ìòï ÏòÅÏñë Ï†ïÎ≥¥</p>
        </div>

        <div class="main-content">
            <!-- 1. Í∞úÏù∏Ï†ïÎ≥¥ ÏûÖÎ†• ÏÑπÏÖò -->
            <div class="section" id="userInfoSection">
                <h2 class="section-title">üë§ Í∏∞Î≥∏Ï†ïÎ≥¥</h2>
                <div class="user-info">
                    <div class="form-group">
                        <label>ÏÑ±Î≥Ñ</label>
                        <div class="radio-group">
                            <div class="radio-item">
                                <input type="radio" id="male" name="gender" value="ÎÇ®ÏÑ±" checked>
                                <label for="male">üë® ÎÇ®ÏÑ±</label>
                            </div>
                            <div class="radio-item">
                                <input type="radio" id="female" name="gender" value="Ïó¨ÏÑ±">
                                <label for="female">üë© Ïó¨ÏÑ±</label>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-group">
                        <label for="ageGroup">ÎÇòÏù¥ÎåÄ</label>
                        <select id="ageGroup">
                            <option value="10ÎåÄ">10ÎåÄ</option>
                            <option value="20ÎåÄ" selected>20ÎåÄ</option>
                            <option value="30ÎåÄ">30ÎåÄ</option>
                            <option value="40ÎåÄ">40ÎåÄ</option>
                            <option value="50ÎåÄ">50ÎåÄ</option>
                            <option value="60ÎåÄÏù¥ÏÉÅ">60ÎåÄ Ïù¥ÏÉÅ</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="activityLevel">ÌôúÎèôÎüâ</label>
                        <select id="activityLevel">
                            <option value="Ï¢åÏãù">Ï¢åÏãù (ÏÇ¨Î¨¥ÏßÅ, ÌïôÏÉù)</option>
                            <option value="Î≥¥ÌÜµ" selected>Î≥¥ÌÜµ (Í∞ÄÎ≤ºÏö¥ Ïö¥Îèô)</option>
                            <option value="ÌôúÎ∞ú">ÌôúÎ∞ú (Í∑úÏπôÏ†Å Ïö¥Îèô)</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- 2. ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú ÏÑπÏÖò -->
            <div class="section" id="uploadSection">
                <h2 class="section-title">üì∏ ÏùåÏãù ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú</h2>
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">üì∑</div>
                    <div class="upload-text">ÏÇ¨ÏßÑÏùÑ ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏÑ∏Ïöî</div>
                    <div class="upload-hint">üí° ÌåÅ: ÏùåÏãù Ï†ÑÏ≤¥Í∞Ä Ïûò Î≥¥Ïù¥ÎèÑÎ°ù Ï∞çÏñ¥Ï£ºÏÑ∏Ïöî (ÏµúÎåÄ 5Ïû•)</div>
                    <button class="file-button" onclick="document.getElementById('fileInput').click()">
                        üìÅ ÌååÏùº ÏÑ†ÌÉù
                    </button>
                    <input type="file" id="fileInput" multiple accept="image/*">
                </div>
                
                <div class="preview-container" id="previewContainer">
                    <!-- ÎØ∏Î¶¨Î≥¥Í∏∞ Ïù¥ÎØ∏ÏßÄÎì§Ïù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                </div>
                
                <button class="analyze-button" id="analyzeBtn" onclick="analyzeFood()" disabled>
                    üîç ÏùåÏãù Î∂ÑÏÑùÌïòÍ∏∞
                </button>
            </div>

            <!-- 3. Î∂ÑÏÑù ÏßÑÌñâ ÏÑπÏÖò -->
            <div class="loading" id="loadingSection">
                <div class="loading-spinner"></div>
                <div class="loading-text" id="loadingText">üîç ÏùåÏãù Ïù∏ÏãùÏ§ë...</div>
            </div>

            <!-- 4. Î∂ÑÏÑù Í≤∞Í≥º ÏÑπÏÖò -->
            <div class="results" id="resultsSection">
                <!-- 4-1. ÏùåÏãù Ïù∏Ïãù Í≤∞Í≥º -->
                <div class="section">
                    <h2 class="section-title">üçú Ïù∏ÏãùÎêú ÏùåÏãù</h2>
                    <div class="food-list" id="foodList">
                        <!-- ÏùåÏãù Î™©Î°ùÏù¥ Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                    </div>
                </div>

                <!-- 4-2. ÌïµÏã¨ ÏòÅÏñëÏ†ïÎ≥¥ ÎåÄÏãúÎ≥¥Îìú -->
                <div class="section">
                    <h2 class="section-title">üìä ÏòÅÏñë Ï†ïÎ≥¥ ÏöîÏïΩ</h2>
                    <div class="nutrition-summary">
                        <div class="calories-display" id="caloriesDisplay">0 kcal</div>
                        <div class="progress-bar">
                            <div class="progress-fill" id="calorieProgress" style="width: 0%"></div>
                        </div>
                        <div style="text-align: center; color: #666; margin-bottom: 20px;">
                            ÏùºÏùº Í∂åÏû•Îüâ ÎåÄÎπÑ: <span id="dailyRatio">0%</span>
                        </div>
                        
                        <div class="nutrition-grid" id="nutritionGrid">
                            <!-- ÏòÅÏñëÏÜå Ï†ïÎ≥¥Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                        </div>
                    </div>
                </div>

                <!-- 4-3. Í∞úÏù∏ÎßûÏ∂§ Í±¥Í∞ï ÌèâÍ∞Ä -->
                <div class="section">
                    <h2 class="section-title" id="personalizedTitle">üíä ÎßûÏ∂§ Î∂ÑÏÑù</h2>
                    <div class="health-assessment">
                        <div class="health-grade" id="healthGrade">üü° Î≥¥ÌÜµ</div>
                        
                        <div class="recommendations">
                            <div class="rec-section" id="positiveSection">
                                <div class="rec-title">‚úÖ Ï¢ãÏùÄÏ†ê</div>
                                <ul class="rec-list" id="positiveList"></ul>
                            </div>
                            
                            <div class="rec-section" id="concernsSection">
                                <div class="rec-title">‚ö†Ô∏è Ï£ºÏùòÏ†ê</div>
                                <ul class="rec-list" id="concernsList"></ul>
                            </div>
                            
                            <div class="rec-section">
                                <div class="rec-title">üí° Ï∂îÏ≤úÏÇ¨Ìï≠</div>
                                <p id="recommendationsText">Î∂ÑÏÑù Ï§ë...</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- 4-4. ÏÉÅÏÑ∏ ÏòÅÏñëÏÑ±Î∂ÑÌëú -->
                <div class="section">
                    <h2 class="section-title">üìã ÏÉÅÏÑ∏ ÏòÅÏñëÏÑ±Î∂Ñ</h2>
                    <table class="nutrition-table">
                        <thead>
                            <tr>
                                <th>ÏòÅÏñëÏÜå</th>
                                <th>Ìï®Îüâ</th>
                                <th>Í∂åÏû•Îüâ ÎåÄÎπÑ</th>
                            </tr>
                        </thead>
                        <tbody id="nutritionTableBody">
                            <!-- ÏÉÅÏÑ∏ ÏòÅÏñë Ï†ïÎ≥¥Í∞Ä Ïó¨Í∏∞Ïóê ÌëúÏãúÎê©ÎãàÎã§ -->
                        </tbody>
                    </table>
                </div>

                <!-- 5. Ïï°ÏÖò Î≤ÑÌäºÎì§ -->
                <div class="action-buttons">
                    <button class="action-btn btn-primary" onclick="resetAnalysis()">
                        üîÑ Îã§Ïãú Î∂ÑÏÑùÌïòÍ∏∞
                    </button>
                    <button class="action-btn btn-secondary" onclick="shareResults()">
                        üì± Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞
                    </button>
                    <button class="action-btn btn-secondary" onclick="viewChart()">
                        üìä ÏòÅÏñë Ï∞®Ìä∏ Î≥¥Í∏∞
                    </button>
                    <button class="action-btn btn-secondary" onclick="saveResults()">
                        üíæ Í≤∞Í≥º Ï†ÄÏû•
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Ï†ÑÏó≠ Î≥ÄÏàò
        let selectedFiles = [];
        let analysisResult = null;

        // ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
        document.addEventListener('DOMContentLoaded', function() {
            initializeApp();
        });

        // Ïï± Ï¥àÍ∏∞Ìôî
        function initializeApp() {
            setupFileUpload();
            setupDragAndDrop();
            updateAnalyzeButton();
        }

        // ÌååÏùº ÏóÖÎ°úÎìú ÏÑ§Ï†ï
        function setupFileUpload() {
            const fileInput = document.getElementById('fileInput');
            fileInput.addEventListener('change', handleFileSelect);
        }

        // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ ÏÑ§Ï†ï
        function setupDragAndDrop() {
            const uploadArea = document.getElementById('uploadArea');
            
            uploadArea.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadArea.classList.add('dragover');
            });
            
            uploadArea.addEventListener('dragleave', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
            });
            
            uploadArea.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadArea.classList.remove('dragover');
                
                const files = Array.from(e.dataTransfer.files);
                addFiles(files);
            });
        }

        // ÌååÏùº ÏÑ†ÌÉù Ï≤òÎ¶¨
        function handleFileSelect(e) {
            const files = Array.from(e.target.files);
            addFiles(files);
        }

        // ÌååÏùº Ï∂îÍ∞Ä
        function addFiles(files) {
            const imageFiles = files.filter(file => file.type.startsWith('image/'));
            
            if (selectedFiles.length + imageFiles.length > 5) {
                alert('ÏµúÎåÄ 5Ïû•ÍπåÏßÄÎßå ÏóÖÎ°úÎìúÌï† Ïàò ÏûàÏäµÎãàÎã§.');
                return;
            }
            
            imageFiles.forEach(file => {
                if (selectedFiles.length < 5) {
                    selectedFiles.push(file);
                }
            });
            
            updatePreview();
            updateAnalyzeButton();
        }

        // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏóÖÎç∞Ïù¥Ìä∏
        function updatePreview() {
            const container = document.getElementById('previewContainer');
            container.innerHTML = '';
            
            selectedFiles.forEach((file, index) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const previewItem = document.createElement('div');
                    previewItem.className = 'preview-item';
                    previewItem.innerHTML = `
                        <img src="${e.target.result}" class="preview-image" alt="ÏùåÏãù ÏÇ¨ÏßÑ">
                        <button class="preview-remove" onclick="removeFile(${index})">√ó</button>
                    `;
                    container.appendChild(previewItem);
                };
                reader.readAsDataURL(file);
            });
        }

        // ÌååÏùº Ï†úÍ±∞
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updatePreview();
            updateAnalyzeButton();
        }

        // Î∂ÑÏÑù Î≤ÑÌäº ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        function updateAnalyzeButton() {
            const analyzeBtn = document.getElementById('analyzeBtn');
            analyzeBtn.disabled = selectedFiles.length === 0;
        }

        // ÏùåÏãù Î∂ÑÏÑù Ïã§Ìñâ
        async function analyzeFood() {
            if (selectedFiles.length === 0) {
                alert('Î∂ÑÏÑùÌï† ÏùåÏãù ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }

            // UI ÏÉÅÌÉú Î≥ÄÍ≤Ω
            showLoading();
            
            try {
                // Ïù¥ÎØ∏ÏßÄÎ•º Base64Î°ú Î≥ÄÌôò
                const imageDataArray = await Promise.all(
                    selectedFiles.map(file => convertToBase64(file))
                );
                
                // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏßë
                const gender = document.querySelector('input[name="gender"]:checked').value;
                const ageGroup = document.getElementById('ageGroup').value;
                const activityLevel = document.getElementById('activityLevel').value;
                
                // Î°úÎî© ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
                updateLoadingText('üìä ÏòÅÏñëÏÑ±Î∂Ñ Í≥ÑÏÇ∞Ï§ë...');
                
                // Google Apps Script Ìï®Ïàò Ìò∏Ï∂ú
                google.script.run
                    .withSuccessHandler(handleAnalysisSuccess)
                    .withFailureHandler(handleAnalysisError)
                    .analyzeFood(imageDataArray, gender, ageGroup, activityLevel);
                    
            } catch (error) {
                console.error('Î∂ÑÏÑù Ï§ë Ïò§Î•ò:', error);
                handleAnalysisError(error);
            }
        }

        // ÌååÏùºÏùÑ Base64Î°ú Î≥ÄÌôò
        function convertToBase64(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = () => resolve(reader.result);
                reader.onerror = reject;
                reader.readAsDataURL(file);
            });
        }

        // Î°úÎî© ÌëúÏãú
        function showLoading() {
            document.getElementById('uploadSection').style.display = 'none';
            document.getElementById('loadingSection').classList.add('show');
            document.getElementById('resultsSection').classList.remove('show');
        }

        // Î°úÎî© ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏
        function updateLoadingText(text) {
            document.getElementById('loadingText').textContent = text;
        }

        // Î∂ÑÏÑù ÏÑ±Í≥µ Ï≤òÎ¶¨
        function handleAnalysisSuccess(response) {
            console.log('Î∂ÑÏÑù ÏôÑÎ£å:', response);
            
            if (response.success) {
                analysisResult = response.result;
                displayResults(analysisResult);
                hideLoading();
                showResults();
            } else {
                handleAnalysisError(response.error);
            }
        }

        // Î∂ÑÏÑù Ïã§Ìå® Ï≤òÎ¶¨
        function handleAnalysisError(error) {
            console.error('Î∂ÑÏÑù Ïã§Ìå®:', error);
            hideLoading();
            alert('Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.\nÏò§Î•ò: ' + error);
            document.getElementById('uploadSection').style.display = 'block';
        }

        // Î°úÎî© Ïà®Í∏∞Í∏∞
        function hideLoading() {
            document.getElementById('loadingSection').classList.remove('show');
        }

        // Í≤∞Í≥º ÌëúÏãú
        function showResults() {
            document.getElementById('resultsSection').classList.add('show');
        }

        // Í≤∞Í≥º ÌôîÎ©¥ Íµ¨ÏÑ±
        function displayResults(result) {
            displayFoodList(result.foods);
            displayNutritionSummary(result);
            displayHealthAssessment(result);
            displayNutritionTable(result);
        }

        // ÏùåÏãù Î™©Î°ù ÌëúÏãú
        function displayFoodList(foods) {
            const container = document.getElementById('foodList');
            container.innerHTML = '';
            
            foods.forEach(food => {
                const foodItem = document.createElement('div');
                foodItem.className = 'food-item';
                foodItem.textContent = food;
                container.appendChild(foodItem);
            });
        }

        // ÏòÅÏñë ÏöîÏïΩ ÌëúÏãú
        function displayNutritionSummary(result) {
            // ÏπºÎ°úÎ¶¨ ÌëúÏãú
            document.getElementById('caloriesDisplay').textContent = `${result.totalCalories} kcal`;
            document.getElementById('dailyRatio').textContent = `${result.dailyCalorieRatio}%`;
            
            // ÏßÑÌñâÎ∞î ÏóÖÎç∞Ïù¥Ìä∏
            const progressBar = document.getElementById('calorieProgress');
            progressBar.style.width = `${Math.min(result.dailyCalorieRatio, 100)}%`;
            
            // ÏòÅÏñëÏÜå Í∑∏Î¶¨Îìú ÌëúÏãú
            const nutritionGrid = document.getElementById('nutritionGrid');
            nutritionGrid.innerHTML = `
                <div class="nutrition-item">
                    <div class="nutrition-icon">üçû</div>
                    <div class="nutrition-value">${result.carbohydrates}g</div>
                    <div class="nutrition-label">ÌÉÑÏàòÌôîÎ¨º</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-icon">ü•©</div>
                    <div class="nutrition-value">${result.protein}g</div>
                    <div class="nutrition-label">Îã®Î∞±Ïßà</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-icon">üßà</div>
                    <div class="nutrition-value">${result.fat}g</div>
                    <div class="nutrition-label">ÏßÄÎ∞©</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-icon">üçØ</div>
                    <div class="nutrition-value">${result.sugar}g</div>
                    <div class="nutrition-label">ÎãπÎ•ò</div>
                </div>
                <div class="nutrition-item">
                    <div class="nutrition-icon">üßÇ</div>
                    <div class="nutrition-value">${result.sodium}mg</div>
                    <div class="nutrition-label">ÎÇòÌä∏Î•®</div>
                </div>
            `;
        }

        // Í±¥Í∞ï ÌèâÍ∞Ä ÌëúÏãú
        function displayHealthAssessment(result) {
            const gender = document.querySelector('input[name="gender"]:checked').value;
            const ageGroup = document.getElementById('ageGroup').value;
            
            // Ï†úÎ™© ÏóÖÎç∞Ïù¥Ìä∏
            document.getElementById('personalizedTitle').textContent = `üíä ${ageGroup} ${gender} ÎßûÏ∂§ Î∂ÑÏÑù`;
            
            // Í±¥Í∞ïÎèÑ Îì±Í∏â ÌëúÏãú
            const healthGrade = document.getElementById('healthGrade');
            const gradeClass = getGradeClass(result.healthGrade);
            healthGrade.className = `health-grade ${gradeClass}`;
            healthGrade.textContent = getGradeEmoji(result.healthGrade) + ' ' + result.healthGrade;
            
            // Ï¢ãÏùÄÏ†ê ÌëúÏãú
            const positiveList = document.getElementById('positiveList');
            positiveList.innerHTML = '';
            result.positivePoints.forEach(point => {
                const li = document.createElement('li');
                li.textContent = point;
                positiveList.appendChild(li);
            });
            
            // Ï£ºÏùòÏ†ê ÌëúÏãú
            const concernsList = document.getElementById('concernsList');
            concernsList.innerHTML = '';
            result.concerns.forEach(concern => {
                const li = document.createElement('li');
                li.textContent = concern;
                concernsList.appendChild(li);
            });
            
            // Ï∂îÏ≤úÏÇ¨Ìï≠ ÌëúÏãú
            document.getElementById('recommendationsText').textContent = result.recommendations;
        }

        // ÏÉÅÏÑ∏ ÏòÅÏñëÌëú ÌëúÏãú
        function displayNutritionTable(result) {
            const tbody = document.getElementById('nutritionTableBody');
            tbody.innerHTML = `
                <tr>
                    <td>Ïó¥Îüâ</td>
                    <td>${result.totalCalories} kcal</td>
                    <td>${result.dailyCalorieRatio}%</td>
                </tr>
                <tr>
                    <td>ÌÉÑÏàòÌôîÎ¨º</td>
                    <td>${result.carbohydrates} g</td>
                    <td>${calculatePercentage(result.carbohydrates, 324)}%</td>
                </tr>
                <tr>
                    <td>Îã®Î∞±Ïßà</td>
                    <td>${result.protein} g</td>
                    <td>${calculatePercentage(result.protein, 55)}%</td>
                </tr>
                <tr>
                    <td>ÏßÄÎ∞©</td>
                    <td>${result.fat} g</td>
                    <td>${calculatePercentage(result.fat, 65)}%</td>
                </tr>
                <tr>
                    <td>ÎãπÎ•ò</td>
                    <td>${result.sugar} g</td>
                    <td>${calculatePercentage(result.sugar, 100)}%</td>
                </tr>
                <tr>
                    <td>ÎÇòÌä∏Î•®</td>
                    <td>${result.sodium} mg</td>
                    <td>${calculatePercentage(result.sodium, 2000)}%</td>
                </tr>
            `;
        }

        // Î∞±Î∂ÑÏú® Í≥ÑÏÇ∞
        function calculatePercentage(value, dailyValue) {
            return Math.round((value / dailyValue) * 100);
        }

        // Îì±Í∏â ÌÅ¥ÎûòÏä§ Î∞òÌôò
        function getGradeClass(grade) {
            const gradeMap = {
                'Îß§Ïö∞Ï¢ãÏùå': 'grade-excellent',
                'Ï¢ãÏùå': 'grade-good',
                'Î≥¥ÌÜµ': 'grade-normal',
                'Ï£ºÏùò': 'grade-caution',
                'ÏúÑÌóò': 'grade-danger'
            };
            return gradeMap[grade] || 'grade-normal';
        }

        // Îì±Í∏â Ïù¥Î™®ÏßÄ Î∞òÌôò
        function getGradeEmoji(grade) {
            const emojiMap = {
                'Îß§Ïö∞Ï¢ãÏùå': 'üü¢',
                'Ï¢ãÏùå': 'üîµ',
                'Î≥¥ÌÜµ': 'üü°',
                'Ï£ºÏùò': 'üü†',
                'ÏúÑÌóò': 'üî¥'
            };
            return emojiMap[grade] || 'üü°';
        }

        // Îã§Ïãú Î∂ÑÏÑùÌïòÍ∏∞
        function resetAnalysis() {
            selectedFiles = [];
            analysisResult = null;
            
            document.getElementById('fileInput').value = '';
            document.getElementById('previewContainer').innerHTML = '';
            document.getElementById('resultsSection').classList.remove('show');
            document.getElementById('uploadSection').style.display = 'block';
            
            updateAnalyzeButton();
        }

        // Í≤∞Í≥º Í≥µÏú†ÌïòÍ∏∞
        function shareResults() {
            if (!analysisResult) return;
            
            const shareText = `üçΩÔ∏è ÏùåÏãù ÏòÅÏñë Î∂ÑÏÑù Í≤∞Í≥º\n\n` +
                `üìä Ï¥ù ÏπºÎ°úÎ¶¨: ${analysisResult.totalCalories}kcal\n` +
                `üçû ÌÉÑÏàòÌôîÎ¨º: ${analysisResult.carbohydrates}g\n` +
                `ü•© Îã®Î∞±Ïßà: ${analysisResult.protein}g\n` +
                `üßà ÏßÄÎ∞©: ${analysisResult.fat}g\n\n` +
                `üíä Í±¥Í∞ïÎèÑ: ${analysisResult.healthGrade}\n` +
                `üí° ${analysisResult.recommendations}`;
            
            if (navigator.share) {
                navigator.share({
                    title: 'ÏùåÏãù ÏòÅÏñë Î∂ÑÏÑù Í≤∞Í≥º',
                    text: shareText
                });
            } else {
                navigator.clipboard.writeText(shareText).then(() => {
                    alert('Í≤∞Í≥ºÍ∞Ä ÌÅ¥Î¶ΩÎ≥¥ÎìúÏóê Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!');
                });
            }
        }

        // ÏòÅÏñë Ï∞®Ìä∏ Î≥¥Í∏∞
        function viewChart() {
            if (!analysisResult) return;
            
            const chartWindow = window.open('', '_blank', 'width=600,height=400');
            chartWindow.document.write(`
                <html>
                <head><title>ÏòÅÏñë Ï∞®Ìä∏</title></head>
                <body>
                    <h2>ÏòÅÏñëÏÑ±Î∂Ñ Ï∞®Ìä∏</h2>
                    <p>Ï∞®Ìä∏ Í∏∞Îä•ÏùÄ Ï∂îÌõÑ ÏóÖÎç∞Ïù¥Ìä∏ ÏòàÏ†ïÏûÖÎãàÎã§.</p>
                    <button onclick="window.close()">Îã´Í∏∞</button>
                </body>
                </html>
            `);
        }

        // Í≤∞Í≥º Ï†ÄÏû•
        function saveResults() {
            if (!analysisResult) return;
            
            const dataStr = JSON.stringify(analysisResult, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            
            const link = document.createElement('a');
            link.href = URL.createObjectURL(dataBlob);
            link.download = `nutrition_analysis_${new Date().toISOString().slice(0,10)}.json`;
            link.click();
        }
    </script>
</body>
</html>
